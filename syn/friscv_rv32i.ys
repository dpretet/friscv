# read design modules
read -sv -I../rt/ ../rtl/friscv_registers.sv
read -sv -I../rt/ ../rtl/friscv_rv32i.sv
read -sv -I../rt/ ../rtl/friscv_rv32i_alu.sv
read -sv -I../rt/ ../rtl/friscv_rv32i_control.sv
read -sv -I../rt/ ../rtl/friscv_rv32i_decoder.sv

# elaborate design hierarchy
hierarchy -check -top friscv32i

# The synthesis flow:

# opt called after all commands: series of trivial optimizations and cleanups

# convert high-level behavioral parts ("processes")
# to d-type flip-flops and muxes
proc; opt;

# Performs FSM extraction and optimization
fsm; opt;

# convert high-level memory constructs to d-type flip-flops
# and multiplexers
memory; opt

# convert design to (logical) gate-level netlists
techmap; opt

# map internal register types to the ones from the cell library
dfflibmap -liberty vsclib013.lib

# use ABC to map remaining logic to cells from the cell library
abc -liberty vsclib013.lib

# cleanup
clean

# write synthesized design
write_verilog friscv32i.v
